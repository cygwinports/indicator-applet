Based on reversal of r409

--- origsrc/indicator-applet/configure.ac	2017-03-07 03:27:43.000000000 -0600
+++ src/indicator-applet/configure.ac	2017-03-07 03:56:32.295698800 -0600
@@ -43,7 +43,6 @@ INDICATOR_PKG=indicator3-0.4
 
 PKG_CHECK_MODULES(APPLET, gtk+-3.0 >= $GTK_REQUIRED_VERSION
                           x11
-                          libido3-0.1
                           $APPLET_PKG
                           $INDICATOR_PKG >= $INDICATOR_REQUIRED_VERSION)
 AC_SUBST(APPLET_CFLAGS)
--- origsrc/indicator-applet/src/applet-main.c	2017-03-07 03:27:43.000000000 -0600
+++ src/indicator-applet/src/applet-main.c	2017-03-07 03:55:30.266649900 -0600
@@ -27,10 +27,7 @@ with this program.  If not, see <http://
 #include <panel-applet.h>
 #include <gdk/gdkkeysyms.h>
 
-#include <libido/libido.h>
-
-#include <libindicator/indicator-object.h>
-#include <libindicator/indicator-ng.h>
+#include "libindicator/indicator-object.h"
 #include "tomboykeybinder.h"
 
 static const gchar * indicator_order[][2] = {
@@ -606,46 +603,10 @@ update_accessible_desc(IndicatorObjectEn
   return;
 }
 
-static void load_indicator(GtkWidget * menubar, IndicatorObject *object, const gchar *name) {
-	GObject * o;
-	GList *entries, *entry;
-
-	/* Set the environment it's in */
-	indicator_object_set_environment(object, (GStrv)indicator_env);
-
-	/* Attach the 'name' to the object */
-	o = G_OBJECT (object);
-	g_object_set_data_full(o, IO_DATA_MENUITEM_LOOKUP, g_hash_table_new (g_direct_hash, g_direct_equal), (GDestroyNotify)g_hash_table_destroy);
-	g_object_set_data_full(o, IO_DATA_NAME, g_strdup(name), g_free);
-	
-	int pos = 5000 - indicator_object_get_position(object);
-	if (pos > 5000) {
-	    pos = name2order(name, NULL);
-	}
-	
-	g_object_set_data(o, IO_DATA_ORDER_NUMBER, GINT_TO_POINTER(pos));
-
-	/* Connect to its signals */
-	g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ENTRY_ADDED,   G_CALLBACK(entry_added),    menubar);
-	g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ENTRY_REMOVED, G_CALLBACK(entry_removed),  menubar);
-	g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ENTRY_MOVED,   G_CALLBACK(entry_moved),    menubar);
-	g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_MENU_SHOW,     G_CALLBACK(menu_show),      menubar);
-	g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ACCESSIBLE_DESC_UPDATE, G_CALLBACK(accessible_desc_update), menubar);
-
-	/* Work on the entries */
-	entries = indicator_object_get_entries(object);
-
-	for (entry = entries; entry != NULL; entry = g_list_next(entry)) {
-		IndicatorObjectEntry * entrydata = (IndicatorObjectEntry *) entry->data;
-		entry_added(object, entrydata, menubar);
-	}
-
-	g_list_free(entries);
-}
-
 static gboolean
 load_module (const gchar * name, GtkWidget * menubar)
 {
+  GObject * o;
   
   g_debug("Looking at Module: %s", name);
   g_return_val_if_fail(name != NULL, FALSE);
@@ -661,124 +622,34 @@ load_module (const gchar * name, GtkWidg
   IndicatorObject * io = indicator_object_new_from_file(fullpath);
   g_free(fullpath);
 
-  load_indicator(menubar, io, name);
-
-  return TRUE;
-}
+  /* Set the environment it's in */
+  indicator_object_set_environment(io, (GStrv)indicator_env);
 
-static void load_modules(GtkWidget *menubar, gint *indicators_loaded) {
-	if  (g_file_test(INDICATOR_DIR, (G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR))) {
-		GDir * dir = g_dir_open(INDICATOR_DIR, 0, NULL);
-
-		const gchar * name;
-		gint count = 0;
-		while ((name = g_dir_read_name(dir)) != NULL) {
-			
-			#ifdef INDICATOR_APPLET_APPMENU
-				if (g_strcmp0(name, "libappmenu.so")) {
-					continue;
-				}
-			#else
-				if (!g_strcmp0(name, "libappmenu.so")) {
-					continue;
-				}
-			#endif
-			
-			#ifdef INDICATOR_APPLET
-				if (!g_strcmp0(name, "libsession.so")) {
-					continue;
-				}
-				if (!g_strcmp0(name, "libme.so")) {
-					continue;
-				}
-				if (!g_strcmp0(name, "libdatetime.so")) {
-					continue;
-				}
-			#endif
-			
-			#ifdef INDICATOR_APPLET_SESSION
-				if (g_strcmp0(name, "libsession.so") && g_strcmp0(name, "libme.so")) {
-					continue;
-				}
-			#endif
-
-			if (load_module(name, menubar)) {
-				count++;
-			}
-		}
-
-		*indicators_loaded += count;
-		
-		g_dir_close (dir);
-	}
-}
-
-#define INDICATOR_SERVICE_DIR "/usr/share/unity/indicators"
-
-static void load_indicators_from_indicator_files(GtkWidget *menubar, gint *indicators_loaded) {
-	GDir *dir;
-	const gchar *name;
-	GError *error = NULL;
-
-	dir = g_dir_open (INDICATOR_SERVICE_DIR, 0, &error);
-
-	if (!dir) {
-		g_warning ("unable to open indicator service file directory: %s", error->message);
-  		g_error_free (error);
-		
-  		return;
-	}
-	
-	gint count = 0;
-	while ((name = g_dir_read_name (dir))) {
-		gchar *filename;
-		IndicatorNg *indicator;
-
-		filename = g_build_filename (INDICATOR_SERVICE_DIR, name, NULL);
-		indicator = indicator_ng_new_for_profile (filename, "desktop", &error);
-		g_free (filename);
-
-		#ifdef INDICATOR_APPLET_APPMENU
-			if (g_strcmp0(name, "com.canonical.indicator.appmenu")) {
-				continue;
-			}
-		#else
-			if (!g_strcmp0(name, "com.canonical.indicator.appmenu")) {
-				continue;
-			}
-		#endif
-		
-		#ifdef INDICATOR_APPLET
-			if (!g_strcmp0(name, "com.canonical.indicator.session")) {
-				continue;
-			}
-			if (!g_strcmp0(name, "com.canonical.indicator.me")) {
-				continue;
-			}
-			if (!g_strcmp0(name, "com.canonical.indicator.datetime")) {
-				continue;
-			}
-		#endif
-		
-		#ifdef INDICATOR_APPLET_SESSION
-			if (g_strcmp0(name, "com.canonical.indicator.session") && g_strcmp0(name, "com.canonical.indicator.me")) {
-				continue;
-			}
-		#endif
-
-		if (indicator) {
-			g_debug ("loading indicator: %s", name);
-			load_indicator(menubar,INDICATOR_OBJECT (indicator), name);
-			count++;
-		}else{
-			g_warning ("unable to load '%s': %s", name, error->message);
-			g_clear_error (&error);
-		}
-	}
+  /* Attach the 'name' to the object */
+  o = G_OBJECT (io);
+  g_object_set_data_full(o, IO_DATA_MENUITEM_LOOKUP, g_hash_table_new (g_direct_hash, g_direct_equal), (GDestroyNotify)g_hash_table_destroy);
+  g_object_set_data_full(o, IO_DATA_NAME, g_strdup(name), g_free);
+  g_object_set_data(o, IO_DATA_ORDER_NUMBER, GINT_TO_POINTER(name2order(name, NULL)));
+
+  /* Connect to its signals */
+  g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ENTRY_ADDED,   G_CALLBACK(entry_added),    menubar);
+  g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ENTRY_REMOVED, G_CALLBACK(entry_removed),  menubar);
+  g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ENTRY_MOVED,   G_CALLBACK(entry_moved),    menubar);
+  g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_MENU_SHOW,     G_CALLBACK(menu_show),      menubar);
+  g_signal_connect(o, INDICATOR_OBJECT_SIGNAL_ACCESSIBLE_DESC_UPDATE, G_CALLBACK(accessible_desc_update), menubar);
+
+  /* Work on the entries */
+  GList * entries = indicator_object_get_entries(io);
+  GList * entry = NULL;
+
+  for (entry = entries; entry != NULL; entry = g_list_next(entry)) {
+    IndicatorObjectEntry * entrydata = (IndicatorObjectEntry *)entry->data;
+    entry_added(io, entrydata, menubar);
+  }
 
-	*indicators_loaded += count;
+  g_list_free(entries);
 
-	g_dir_close (dir);
+  return TRUE;
 }
 
 static void
@@ -957,8 +828,6 @@ static gboolean
 applet_fill_cb (PanelApplet * applet, const gchar * iid G_GNUC_UNUSED,
                 gpointer data G_GNUC_UNUSED)
 {
-  ido_init();
-
 #ifdef HAVE_LIBPANEL_APPLET
   static const GActionEntry menu_actions[] = {
     {"about", about_cb }
@@ -1064,9 +933,43 @@ applet_fill_cb (PanelApplet * applet, co
   /* Add in filter func */
   tomboy_keybinder_bind(hotkey_keycode, hotkey_filter, menubar);
 
-	/* load indicators */
-	load_modules(menubar, &indicators_loaded);
-	load_indicators_from_indicator_files(menubar, &indicators_loaded);
+  /* load 'em */
+  if (g_file_test(INDICATOR_DIR, (G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR))) {
+    GDir * dir = g_dir_open(INDICATOR_DIR, 0, NULL);
+
+    const gchar * name;
+    while ((name = g_dir_read_name(dir)) != NULL) {
+#ifdef INDICATOR_APPLET_APPMENU
+      if (g_strcmp0(name, "libappmenu.so")) {
+        continue;
+      }
+#else
+      if (!g_strcmp0(name, "libappmenu.so")) {
+        continue;
+      }
+#endif
+#ifdef INDICATOR_APPLET
+      if (!g_strcmp0(name, "libsession.so")) {
+        continue;
+      }
+      if (!g_strcmp0(name, "libme.so")) {
+        continue;
+      }
+      if (!g_strcmp0(name, "libdatetime.so")) {
+        continue;
+      }
+#endif
+#ifdef INDICATOR_APPLET_SESSION
+      if (g_strcmp0(name, "libsession.so") && g_strcmp0(name, "libme.so")) {
+        continue;
+      }
+#endif
+      if (load_module(name, menubar)) {
+        indicators_loaded++;
+      }
+    }
+    g_dir_close (dir);
+  }
 
   if (indicators_loaded == 0) {
     /* A label to allow for click through */
